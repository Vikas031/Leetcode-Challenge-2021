Problem : Burst Balloon

You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.
If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is 
a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

C++ Solution:

class Solution {
public:
    int n;
    int helper(vector<int> &nums,int i,int j,vector<vector<int>> &dp)
    {
        if(i>j)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        int sum=0,left,right;
        for(int pos=i;pos<=j;pos++)
        {
            left=((i==0)?1:nums[i-1]);
            right=((j==n-1)?1:nums[j+1]);
            sum=max(sum,nums[pos]*left*right+helper(nums,i,pos-1,dp)+helper(nums,pos+1,j,dp));
        }
        return  dp[i][j]=sum;
        
    }
    
    int maxCoins(vector<int>& nums) {
       n=nums.size(); 
       vector<vector<int>> dp(n+1,vector<int> (n+1,-1));
       return helper(nums,0,n-1,dp);
    }
};
